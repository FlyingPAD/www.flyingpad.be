// <auto-generated />
using System;
using MB.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MB.Persistence.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250509194149_Seeding_Init_Fix_4")]
    partial class Seeding_Init_Fix_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MB.Domain.AchievementAggregate.AchievementDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoneMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.ToTable("AchievementDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6430),
                            CreatedBy = "Administrator",
                            DoneMessage = "You created an account :)",
                            Goal = "Create an account",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6433),
                            ModifiedBy = "Administrator",
                            Title = "Official Member",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 17,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000017"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6454),
                            CreatedBy = "Administrator",
                            DoneMessage = "Your email is verified!",
                            Goal = "Verify your email address",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6454),
                            ModifiedBy = "Administrator",
                            Title = "Email Verified",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 18,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000018"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6457),
                            CreatedBy = "Administrator",
                            DoneMessage = "Your profile is complete!",
                            Goal = "Complete your profile (add name, birthdate, avatar)",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6457),
                            ModifiedBy = "Administrator",
                            Title = "Profile Completed",
                            XpReward = 75
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000002"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6460),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6460),
                            ModifiedBy = "Administrator",
                            Title = "Novice (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000003"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6463),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6463),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000004"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6466),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6466),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000005"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6469),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6469),
                            ModifiedBy = "Administrator",
                            Title = "Expert (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000006"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6472),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6472),
                            ModifiedBy = "Administrator",
                            Title = "Master (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000007"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6477),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6477),
                            ModifiedBy = "Administrator",
                            Title = "Novice (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000008"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6480),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6480),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 9,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000009"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6482),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6483),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 10,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000010"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6486),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6486),
                            ModifiedBy = "Administrator",
                            Title = "Expert (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 11,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000011"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6488),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6488),
                            ModifiedBy = "Administrator",
                            Title = "Master (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 12,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000012"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6490),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6490),
                            ModifiedBy = "Administrator",
                            Title = "Novice (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 13,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000013"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6492),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6493),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 14,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000014"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6495),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6495),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 15,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000015"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6499),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6499),
                            ModifiedBy = "Administrator",
                            Title = "Expert (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 16,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000016"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6501),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6502),
                            ModifiedBy = "Administrator",
                            Title = "Master (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 19,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000019"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6504),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 2!",
                            Goal = "Reach level 2",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6504),
                            ModifiedBy = "Administrator",
                            Title = "Level 2 Achieved",
                            XpReward = 100
                        },
                        new
                        {
                            EntityId = 20,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6507),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 3!",
                            Goal = "Reach level 3",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6507),
                            ModifiedBy = "Administrator",
                            Title = "Level 3 Achieved",
                            XpReward = 150
                        },
                        new
                        {
                            EntityId = 21,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000021"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6509),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 4!",
                            Goal = "Reach level 4",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6509),
                            ModifiedBy = "Administrator",
                            Title = "Level 4 Achieved",
                            XpReward = 200
                        },
                        new
                        {
                            EntityId = 22,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000022"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6511),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 5!",
                            Goal = "Reach level 5",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6511),
                            ModifiedBy = "Administrator",
                            Title = "Level 5 Achieved",
                            XpReward = 250
                        },
                        new
                        {
                            EntityId = 23,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000023"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6514),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 6!",
                            Goal = "Reach level 6",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6514),
                            ModifiedBy = "Administrator",
                            Title = "Level 6 Achieved",
                            XpReward = 300
                        },
                        new
                        {
                            EntityId = 24,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000024"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6516),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 7!",
                            Goal = "Reach level 7",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6516),
                            ModifiedBy = "Administrator",
                            Title = "Level 7 Achieved",
                            XpReward = 350
                        },
                        new
                        {
                            EntityId = 25,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000025"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6521),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Wood league!",
                            Goal = "Be promoted to Wood league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6521),
                            ModifiedBy = "Administrator",
                            Title = "Wood League",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 26,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000026"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6524),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Stone league!",
                            Goal = "Be promoted to Stone league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6524),
                            ModifiedBy = "Administrator",
                            Title = "Stone League",
                            XpReward = 100
                        },
                        new
                        {
                            EntityId = 27,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000027"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6526),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Bronze league!",
                            Goal = "Be promoted to Bronze league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6526),
                            ModifiedBy = "Administrator",
                            Title = "Bronze League",
                            XpReward = 150
                        },
                        new
                        {
                            EntityId = 28,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000028"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6529),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Silver league!",
                            Goal = "Be promoted to Silver league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6529),
                            ModifiedBy = "Administrator",
                            Title = "Silver League",
                            XpReward = 200
                        },
                        new
                        {
                            EntityId = 29,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000029"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6531),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Crystal league!",
                            Goal = "Be promoted to Crystal league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6531),
                            ModifiedBy = "Administrator",
                            Title = "Crystal League",
                            XpReward = 250
                        },
                        new
                        {
                            EntityId = 30,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000030"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6533),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Elite league!",
                            Goal = "Be promoted to Elite league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6534),
                            ModifiedBy = "Administrator",
                            Title = "Elite League",
                            XpReward = 300
                        },
                        new
                        {
                            EntityId = 31,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000031"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6536),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Champion league!",
                            Goal = "Be promoted to Champion league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6536),
                            ModifiedBy = "Administrator",
                            Title = "Champion League",
                            XpReward = 350
                        },
                        new
                        {
                            EntityId = 32,
                            BusinessId = new Guid("20000000-0000-0000-0000-000000000032"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6538),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Legend league!",
                            Goal = "Be promoted to Legend league",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 864, DateTimeKind.Utc).AddTicks(6538),
                            ModifiedBy = "Administrator",
                            Title = "Legend League",
                            XpReward = 400
                        });
                });

            modelBuilder.Entity("MB.Domain.AchievementAggregate.UserAchievement", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<int>("AchievementDefinitionId")
                        .HasColumnType("int");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("AchievementDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.Artist", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000001"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 865, DateTimeKind.Utc).AddTicks(4911),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 865, DateTimeKind.Utc).AddTicks(4913),
                            ModifiedBy = "Administrator",
                            Name = "# Unknown Artist",
                            Pseudonym = ""
                        });
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationArtistStyle", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "StyleId");

                    b.HasIndex("StyleId");

                    b.ToTable("RArtistStyle");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkArtist", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("RLinkArtist");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkModel", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RLinkModel");
                });

            modelBuilder.Entity("MB.Domain.BoardAggregate.Board", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("MB.Domain.BookAggregate.Book", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.Franchise", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationBookFranchise", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "FranchiseId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("RBookFranchise");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationFranchiseMedia", b =>
                {
                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("FranchiseId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("RFranchiseMedia");
                });

            modelBuilder.Entity("MB.Domain.LeagueAggregate.LeagueDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<int>("MinExperience")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("SeasonId");

                    b.ToTable("LeagueDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000101"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8274),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-wood",
                            MaxExperience = 99,
                            MinExperience = 0,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8277),
                            ModifiedBy = "Administrator",
                            Name = "Wood",
                            Order = 1
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000102"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8290),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-stone",
                            MaxExperience = 199,
                            MinExperience = 100,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8290),
                            ModifiedBy = "Administrator",
                            Name = "Stone",
                            Order = 2
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000103"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8293),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-bronze",
                            MaxExperience = 299,
                            MinExperience = 200,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8294),
                            ModifiedBy = "Administrator",
                            Name = "Bronze",
                            Order = 3
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000104"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8297),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-silver",
                            MaxExperience = 399,
                            MinExperience = 300,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8297),
                            ModifiedBy = "Administrator",
                            Name = "Silver",
                            Order = 4
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000105"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8300),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-crystal",
                            MaxExperience = 499,
                            MinExperience = 400,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8300),
                            ModifiedBy = "Administrator",
                            Name = "Crystal",
                            Order = 5
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000106"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8302),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-elite",
                            MaxExperience = 599,
                            MinExperience = 500,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8303),
                            ModifiedBy = "Administrator",
                            Name = "Elite",
                            Order = 6
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000107"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8305),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-champion",
                            MaxExperience = 699,
                            MinExperience = 600,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8305),
                            ModifiedBy = "Administrator",
                            Name = "Champion",
                            Order = 7
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("00000000-0000-0000-0000-000000000108"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8315),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-legend",
                            MinExperience = 700,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 877, DateTimeKind.Utc).AddTicks(8315),
                            ModifiedBy = "Administrator",
                            Name = "Legend",
                            Order = 8
                        });
                });

            modelBuilder.Entity("MB.Domain.LevelAggregate.LevelDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<int>("MinExperience")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("LevelDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1913),
                            CreatedBy = "Administrator",
                            LevelNumber = 1,
                            MaxExperience = 99,
                            MinExperience = 0,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1914),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1920),
                            CreatedBy = "Administrator",
                            LevelNumber = 2,
                            MaxExperience = 199,
                            MinExperience = 100,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1920),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1924),
                            CreatedBy = "Administrator",
                            LevelNumber = 3,
                            MaxExperience = 399,
                            MinExperience = 200,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1924),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1926),
                            CreatedBy = "Administrator",
                            LevelNumber = 4,
                            MaxExperience = 699,
                            MinExperience = 400,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1926),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1928),
                            CreatedBy = "Administrator",
                            LevelNumber = 5,
                            MaxExperience = 999,
                            MinExperience = 700,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1929),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1931),
                            CreatedBy = "Administrator",
                            LevelNumber = 6,
                            MinExperience = 1000,
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 878, DateTimeKind.Utc).AddTicks(1931),
                            ModifiedBy = "Administrator"
                        });
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.Link", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.RelationLinkCategory", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "LinkCategoryId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("RLinkCategory");
                });

            modelBuilder.Entity("MB.Domain.LinkCategoryAggregate.LinkCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("LinkCategories");
                });

            modelBuilder.Entity("MB.Domain.MediumAggregate.Media", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.Model", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationBookModel", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RBookModel");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationFranchiseModel", b =>
                {
                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("FranchiseId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RFranchiseModel");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Mood", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodArtist", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("RMoodArtist");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodFranchise", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "FranchiseId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("RMoodFranchise");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodModel", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RMoodModel");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodTag", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RMoodTag");
                });

            modelBuilder.Entity("MB.Domain.SeasonAggregate.Season", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EntityId");

                    b.ToTable("Seasons", (string)null);
                });

            modelBuilder.Entity("MB.Domain.StyleAggregate.Style", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_Tag_BusinessId");

                    b.HasIndex("TagCategoryId")
                        .HasDatabaseName("IX_Tag_TagCategoryId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee1"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(161),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(162),
                            ModifiedBy = "Administrator",
                            Name = "# All Files",
                            TagCategoryId = 1
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee3"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(196),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(197),
                            ModifiedBy = "Administrator",
                            Name = "# New Files",
                            TagCategoryId = 1
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee2"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(203),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(204),
                            ModifiedBy = "Administrator",
                            Name = "Audio",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee4"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(207),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(208),
                            ModifiedBy = "Administrator",
                            Name = "Image",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee5"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(213),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(213),
                            ModifiedBy = "Administrator",
                            Name = "Video",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee6"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(218),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(219),
                            ModifiedBy = "Administrator",
                            Name = "*.mp3",
                            TagCategoryId = 3
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee7"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(224),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(224),
                            ModifiedBy = "Administrator",
                            Name = "*.bmp",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee8"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(240),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(240),
                            ModifiedBy = "Administrator",
                            Name = "*.gif",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 9,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee9"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(246),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(246),
                            ModifiedBy = "Administrator",
                            Name = "*.jpeg",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 10,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee10"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(252),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(252),
                            ModifiedBy = "Administrator",
                            Name = "*.jpg",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 11,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee11"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(258),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(259),
                            ModifiedBy = "Administrator",
                            Name = "*.png",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 12,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee12"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(263),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(264),
                            ModifiedBy = "Administrator",
                            Name = "*.webp",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 13,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee13"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(268),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(268),
                            ModifiedBy = "Administrator",
                            Name = "*.mp4",
                            TagCategoryId = 5
                        },
                        new
                        {
                            EntityId = 14,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee14"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(272),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(272),
                            ModifiedBy = "Administrator",
                            Name = "*.webm",
                            TagCategoryId = 5
                        },
                        new
                        {
                            EntityId = 15,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee15"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(276),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(276),
                            ModifiedBy = "Administrator",
                            Name = "Landscape",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 16,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee16"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(285),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(286),
                            ModifiedBy = "Administrator",
                            Name = "Landscape (16:9)",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 17,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee17"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(290),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(291),
                            ModifiedBy = "Administrator",
                            Name = "Portrait",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 18,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee18"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(294),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(294),
                            ModifiedBy = "Administrator",
                            Name = "Portrait (16:9)",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 19,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeee19"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(298),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 928, DateTimeKind.Utc).AddTicks(298),
                            ModifiedBy = "Administrator",
                            Name = "Square",
                            TagCategoryId = 6
                        });
                });

            modelBuilder.Entity("MB.Domain.TagCategoryAggregate.TagCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("TagCategories");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee1"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8156),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8158),
                            ModifiedBy = "Administrator",
                            Name = "#"
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee2"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8179),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8180),
                            ModifiedBy = "Administrator",
                            Name = "# File"
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee3"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8186),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8187),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Audio"
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee4"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8193),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8194),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Image"
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee5"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8199),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8200),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Video"
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeee6"),
                            Created = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8220),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 19, 41, 48, 926, DateTimeKind.Utc).AddTicks(8220),
                            ModifiedBy = "Administrator",
                            Name = "# File Format"
                        });
                });

            modelBuilder.Entity("MB.Domain.TaskAggregate.Task", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("05/09/2025 21:41:48");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MB.Domain.TaskCategoryAggregate.TaskCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LeagueDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.HasIndex("LeagueDefinitionId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.AudioSoundCloud", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmbedUrl");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailUrl");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Document", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.ToTable("Moods", t =>
                        {
                            t.Property("Size")
                                .HasColumnName("Document_Size");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Image", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Video", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("Moods", null, t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Video_Height");

                            t.Property("Size")
                                .HasColumnName("Video_Size");

                            t.Property("Width")
                                .HasColumnName("Video_Width");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.VideoYouTube", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("MB.Domain.AchievementAggregate.UserAchievement", b =>
                {
                    b.HasOne("MB.Domain.AchievementAggregate.AchievementDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("AchievementDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MB.Domain.UserAggregate.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationArtistStyle", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("ArtistStyles")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.StyleAggregate.Style", "Style")
                        .WithMany("ArtistStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkArtist", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("LinkArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkArtists")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkModel", b =>
                {
                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkModels")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("LinkModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationBookFranchise", b =>
                {
                    b.HasOne("MB.Domain.BookAggregate.Book", "Book")
                        .WithMany("BookFranchise")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("BookFranchise")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationFranchiseMedia", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("FranchiseMedias")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MediumAggregate.Media", "Media")
                        .WithMany("FranchiseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MB.Domain.LeagueAggregate.LeagueDefinition", b =>
                {
                    b.HasOne("MB.Domain.SeasonAggregate.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.RelationLinkCategory", b =>
                {
                    b.HasOne("MB.Domain.LinkCategoryAggregate.LinkCategory", "LinkCategory")
                        .WithMany("RLinkCategories")
                        .HasForeignKey("LinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkCategories")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("LinkCategory");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationBookModel", b =>
                {
                    b.HasOne("MB.Domain.BookAggregate.Book", "Book")
                        .WithMany("BookModel")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("BookModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationFranchiseModel", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("FranchiseModels")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("FranchiseModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodArtist", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("MoodArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodArtists")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodFranchise", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("MoodFranchises")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodFranchises")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodModel", b =>
                {
                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("MoodModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodModels")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodTag", b =>
                {
                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodTags")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.TagAggregate.Tag", "Tag")
                        .WithMany("MoodTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.HasOne("MB.Domain.TagCategoryAggregate.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("MB.Domain.TaskAggregate.Task", b =>
                {
                    b.HasOne("MB.Domain.TaskCategoryAggregate.TaskCategory", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCategory");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.EmailVerificationToken", b =>
                {
                    b.HasOne("MB.Domain.UserAggregate.User", "User")
                        .WithMany("EmailVerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.HasOne("MB.Domain.LeagueAggregate.LeagueDefinition", "LeagueDefinition")
                        .WithMany()
                        .HasForeignKey("LeagueDefinitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MB.Domain.SeasonAggregate.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LeagueDefinition");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.Artist", b =>
                {
                    b.Navigation("ArtistStyles");

                    b.Navigation("LinkArtists");

                    b.Navigation("MoodArtists");
                });

            modelBuilder.Entity("MB.Domain.BookAggregate.Book", b =>
                {
                    b.Navigation("BookFranchise");

                    b.Navigation("BookModel");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.Franchise", b =>
                {
                    b.Navigation("BookFranchise");

                    b.Navigation("FranchiseMedias");

                    b.Navigation("FranchiseModels");

                    b.Navigation("MoodFranchises");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.Link", b =>
                {
                    b.Navigation("LinkArtists");

                    b.Navigation("LinkCategories");

                    b.Navigation("LinkModels");
                });

            modelBuilder.Entity("MB.Domain.LinkCategoryAggregate.LinkCategory", b =>
                {
                    b.Navigation("RLinkCategories");
                });

            modelBuilder.Entity("MB.Domain.MediumAggregate.Media", b =>
                {
                    b.Navigation("FranchiseMedias");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.Model", b =>
                {
                    b.Navigation("BookModel");

                    b.Navigation("FranchiseModels");

                    b.Navigation("LinkModels");

                    b.Navigation("MoodModels");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Mood", b =>
                {
                    b.Navigation("MoodArtists");

                    b.Navigation("MoodFranchises");

                    b.Navigation("MoodModels");

                    b.Navigation("MoodTags");
                });

            modelBuilder.Entity("MB.Domain.StyleAggregate.Style", b =>
                {
                    b.Navigation("ArtistStyles");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.Navigation("MoodTags");
                });

            modelBuilder.Entity("MB.Domain.TagCategoryAggregate.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MB.Domain.TaskCategoryAggregate.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("EmailVerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

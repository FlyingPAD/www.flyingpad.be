// <auto-generated />
using System;
using MB.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MB.Persistence.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250509200744_Seeding_Init_Fix_5")]
    partial class Seeding_Init_Fix_5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MB.Domain.AchievementAggregate.AchievementDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoneMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.ToTable("AchievementDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9768),
                            CreatedBy = "Administrator",
                            DoneMessage = "You created an account :)",
                            Goal = "Create an account",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9771),
                            ModifiedBy = "Administrator",
                            Title = "Official Member",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 17,
                            BusinessId = new Guid("9c2f1e4a-3d7b-4f8c-9a07-1b2c3d4e5f60"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9805),
                            CreatedBy = "Administrator",
                            DoneMessage = "Your email is verified!",
                            Goal = "Verify your email address",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9805),
                            ModifiedBy = "Administrator",
                            Title = "Email Verified",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 18,
                            BusinessId = new Guid("ac5f6d7b-8c9d-4e0f-1a2b-3c4d5e6f7a8b"),
                            Category = "standard",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9808),
                            CreatedBy = "Administrator",
                            DoneMessage = "Your profile is complete!",
                            Goal = "Complete your profile (add name, birthdate, avatar)",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9808),
                            ModifiedBy = "Administrator",
                            Title = "Profile Completed",
                            XpReward = 75
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("b1e2c3d4-f5a6-7b8c-9d0e-1f2a3b4c5d6e"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9811),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9811),
                            ModifiedBy = "Administrator",
                            Title = "Novice (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("c2d3e4f5-a6b7-8c9d-0e1f-2a3b4c5d6e7f"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9814),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9814),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("d3e4f5a6-b7c8-9d0e-1f2a-3b4c5d6e7f80"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9818),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9818),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("e4f5a6b7-c8d9-0e1f-2a3b-4c5d6e7f8091"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9820),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9821),
                            ModifiedBy = "Administrator",
                            Title = "Expert (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("f5a6b7c8-d9e0-1f2a-3b4c-5d6e7f8091a2"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9823),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9824),
                            ModifiedBy = "Administrator",
                            Title = "Master (bass)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("a6b7c8d9-e0f1-2a3b-4c5d-6e7f8091a2b3"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9826),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9826),
                            ModifiedBy = "Administrator",
                            Title = "Novice (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("b7c8d9e0-f1a2-3b4c-5d6e-7f8091a2b3c4"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9831),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9832),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 9,
                            BusinessId = new Guid("c8d9e0f1-a2b3-4c5d-6e7f-8091a2b3c4d5"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9834),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9834),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 10,
                            BusinessId = new Guid("d9e0f1a2-b3c4-5d6e-7f80-91a2b3c4d5e6"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9836),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9836),
                            ModifiedBy = "Administrator",
                            Title = "Expert (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 11,
                            BusinessId = new Guid("e0f1a2b3-c4d5-6e7f-8091-a2b3c4d5e6f7"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9838),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9838),
                            ModifiedBy = "Administrator",
                            Title = "Master (alto)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 12,
                            BusinessId = new Guid("f1a2b3c4-d5e6-7f80-91a2-b3c4d5e6f7a8"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9840),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 10 sec. !!",
                            Goal = "Survive 10 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9840),
                            ModifiedBy = "Administrator",
                            Title = "Novice (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 13,
                            BusinessId = new Guid("a2b3c4d5-e6f7-8091-a2b3-c4d5e6f7a8b9"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9842),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 20 sec. !!",
                            Goal = "Survive 20 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9843),
                            ModifiedBy = "Administrator",
                            Title = "Intermediate (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 14,
                            BusinessId = new Guid("b3c4d5e6-f7a8-091a-2b3c-4d5e6f7a8b9c"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9845),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 30 sec. !!",
                            Goal = "Survive 30 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9845),
                            ModifiedBy = "Administrator",
                            Title = "Advanced (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 15,
                            BusinessId = new Guid("c4d5e6f7-a8b9-0a1b-3c4d-5e6f7a8b9c0d"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9847),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 40 sec. !!",
                            Goal = "Survive 40 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9847),
                            ModifiedBy = "Administrator",
                            Title = "Expert (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 16,
                            BusinessId = new Guid("d5e6f7a8-b9c0-1a2b-3c4d-5e6f7a8b9c0d"),
                            Category = "note-master",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9852),
                            CreatedBy = "Administrator",
                            DoneMessage = "You lasted 50 sec. !!",
                            Goal = "Survive 50 seconds.",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9852),
                            ModifiedBy = "Administrator",
                            Title = "Master (treble)",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 19,
                            BusinessId = new Guid("e6f7a8b9-c0d1-2a3b-4c5d-6e7f8091a2b3"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9854),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 2!",
                            Goal = "Reach level 2",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9855),
                            ModifiedBy = "Administrator",
                            Title = "Level 2 Achieved",
                            XpReward = 100
                        },
                        new
                        {
                            EntityId = 20,
                            BusinessId = new Guid("f7a8b9c0-d1e2-3a4b-5c6d-7e8f9012a3b4"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9857),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 3!",
                            Goal = "Reach level 3",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9857),
                            ModifiedBy = "Administrator",
                            Title = "Level 3 Achieved",
                            XpReward = 150
                        },
                        new
                        {
                            EntityId = 21,
                            BusinessId = new Guid("a8b9c0d1-e2f3-4a5b-6c7d-8e9f0123b4c5"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9859),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 4!",
                            Goal = "Reach level 4",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9859),
                            ModifiedBy = "Administrator",
                            Title = "Level 4 Achieved",
                            XpReward = 200
                        },
                        new
                        {
                            EntityId = 22,
                            BusinessId = new Guid("b9c0d1e2-f3a4-5b6c-7d8e-9f0123b4c5d6"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9861),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 5!",
                            Goal = "Reach level 5",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9862),
                            ModifiedBy = "Administrator",
                            Title = "Level 5 Achieved",
                            XpReward = 250
                        },
                        new
                        {
                            EntityId = 23,
                            BusinessId = new Guid("c0d1e2f3-a4b5-6c7d-8e9f-0123b4c5d6e7"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9864),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 6!",
                            Goal = "Reach level 6",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9864),
                            ModifiedBy = "Administrator",
                            Title = "Level 6 Achieved",
                            XpReward = 300
                        },
                        new
                        {
                            EntityId = 24,
                            BusinessId = new Guid("d1e2f3a4-b5c6-7d8e-9f01-234b5c6d7e8f"),
                            Category = "level",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9916),
                            CreatedBy = "Administrator",
                            DoneMessage = "You reached level 7!",
                            Goal = "Reach level 7",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9916),
                            ModifiedBy = "Administrator",
                            Title = "Level 7 Achieved",
                            XpReward = 350
                        },
                        new
                        {
                            EntityId = 25,
                            BusinessId = new Guid("e2f3a4b5-c6d7-8e9f-0123-4b5c6d7e8f90"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9919),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Wood league!",
                            Goal = "Be promoted to Wood league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9919),
                            ModifiedBy = "Administrator",
                            Title = "Wood League",
                            XpReward = 50
                        },
                        new
                        {
                            EntityId = 26,
                            BusinessId = new Guid("f3a4b5c6-d7e8-9f01-2345-c6d7e8f901a2"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9925),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Stone league!",
                            Goal = "Be promoted to Stone league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9926),
                            ModifiedBy = "Administrator",
                            Title = "Stone League",
                            XpReward = 100
                        },
                        new
                        {
                            EntityId = 27,
                            BusinessId = new Guid("a4b5c6d7-e8f9-0123-4567-d7e8f901a2b3"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9928),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Bronze league!",
                            Goal = "Be promoted to Bronze league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9929),
                            ModifiedBy = "Administrator",
                            Title = "Bronze League",
                            XpReward = 150
                        },
                        new
                        {
                            EntityId = 28,
                            BusinessId = new Guid("b5c6d7e8-f901-2345-6789-e8f901a2b3c4"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9931),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Silver league!",
                            Goal = "Be promoted to Silver league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9932),
                            ModifiedBy = "Administrator",
                            Title = "Silver League",
                            XpReward = 200
                        },
                        new
                        {
                            EntityId = 29,
                            BusinessId = new Guid("c6d7e8f9-0123-4567-89a0-f901a2b3c4d5"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9934),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Crystal league!",
                            Goal = "Be promoted to Crystal league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9934),
                            ModifiedBy = "Administrator",
                            Title = "Crystal League",
                            XpReward = 250
                        },
                        new
                        {
                            EntityId = 30,
                            BusinessId = new Guid("d7e8f901-2345-6789-a0b1-0123c4d5e6f7"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9936),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Elite league!",
                            Goal = "Be promoted to Elite league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9936),
                            ModifiedBy = "Administrator",
                            Title = "Elite League",
                            XpReward = 300
                        },
                        new
                        {
                            EntityId = 31,
                            BusinessId = new Guid("e8f901a2-3456-789a-0b1c-1234d5e6f7a8"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9938),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Champion league!",
                            Goal = "Be promoted to Champion league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9938),
                            ModifiedBy = "Administrator",
                            Title = "Champion League",
                            XpReward = 350
                        },
                        new
                        {
                            EntityId = 32,
                            BusinessId = new Guid("f901a2b3-4567-89a0-b1c2-2345e6f7a8b9"),
                            Category = "league",
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9940),
                            CreatedBy = "Administrator",
                            DoneMessage = "You’re now in Legend league!",
                            Goal = "Be promoted to Legend league",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 214, DateTimeKind.Utc).AddTicks(9941),
                            ModifiedBy = "Administrator",
                            Title = "Legend League",
                            XpReward = 400
                        });
                });

            modelBuilder.Entity("MB.Domain.AchievementAggregate.UserAchievement", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<int>("AchievementDefinitionId")
                        .HasColumnType("int");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("AchievementDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.Artist", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000001"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 215, DateTimeKind.Utc).AddTicks(7171),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 215, DateTimeKind.Utc).AddTicks(7172),
                            ModifiedBy = "Administrator",
                            Name = "# Unknown Artist",
                            Pseudonym = ""
                        });
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationArtistStyle", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "StyleId");

                    b.HasIndex("StyleId");

                    b.ToTable("RArtistStyle");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkArtist", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("RLinkArtist");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkModel", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RLinkModel");
                });

            modelBuilder.Entity("MB.Domain.BoardAggregate.Board", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("MB.Domain.BookAggregate.Book", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.Franchise", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationBookFranchise", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "FranchiseId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("RBookFranchise");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationFranchiseMedia", b =>
                {
                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("FranchiseId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("RFranchiseMedia");
                });

            modelBuilder.Entity("MB.Domain.LeagueAggregate.LeagueDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<int>("MinExperience")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("SeasonId");

                    b.ToTable("LeagueDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("a12f4d56-3b78-4c9e-9a1d-2e3f4b5c6d7e"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(361),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-wood",
                            MaxExperience = 99,
                            MinExperience = 0,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(364),
                            ModifiedBy = "Administrator",
                            Name = "Wood",
                            Order = 1
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("b23e5c67-4c89-5daf-0b2e-3f4a5c6d7e8f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(381),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-stone",
                            MaxExperience = 199,
                            MinExperience = 100,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(381),
                            ModifiedBy = "Administrator",
                            Name = "Stone",
                            Order = 2
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("c34f6d78-5da0-6ebf-1c3f-4a5b6c7d8e9f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(386),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-bronze",
                            MaxExperience = 299,
                            MinExperience = 200,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(386),
                            ModifiedBy = "Administrator",
                            Name = "Bronze",
                            Order = 3
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("d45a7e89-6eb1-7fc0-2d4f-5b6c7d8e9f0a"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(389),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-silver",
                            MaxExperience = 399,
                            MinExperience = 300,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(389),
                            ModifiedBy = "Administrator",
                            Name = "Silver",
                            Order = 4
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("e56b8f9a-7fc2-8ad1-3e5f-6c7d8e9f0a1b"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(392),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-crystal",
                            MaxExperience = 499,
                            MinExperience = 400,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(392),
                            ModifiedBy = "Administrator",
                            Name = "Crystal",
                            Order = 5
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("f67c9fab-8ad3-9be2-4f6f-7d8e9f0a1b2c"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(395),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-elite",
                            MaxExperience = 599,
                            MinExperience = 500,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(395),
                            ModifiedBy = "Administrator",
                            Name = "Elite",
                            Order = 6
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("a78d0abc-9be4-acf3-5f7f-8e9f0a1b2c3d"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(397),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-champion",
                            MaxExperience = 699,
                            MinExperience = 600,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(397),
                            ModifiedBy = "Administrator",
                            Name = "Champion",
                            Order = 7
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("b89e1bcd-acf5-bd04-6f8f-9f0a1b2c3d4e"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(417),
                            CreatedBy = "Administrator",
                            IconCssClass = "league-legend",
                            MinExperience = 700,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(417),
                            ModifiedBy = "Administrator",
                            Name = "Legend",
                            Order = 8
                        });
                });

            modelBuilder.Entity("MB.Domain.LevelAggregate.LevelDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<int>("MinExperience")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("LevelDefinitions", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("3f1e2d4c-5b6a-7d8c-9e0f-1a2b3c4d5e6f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3870),
                            CreatedBy = "Administrator",
                            LevelNumber = 1,
                            MaxExperience = 99,
                            MinExperience = 0,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3871),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3877),
                            CreatedBy = "Administrator",
                            LevelNumber = 2,
                            MaxExperience = 199,
                            MinExperience = 100,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3878),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("12345678-9abc-def0-1234-56789abcdef0"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3881),
                            CreatedBy = "Administrator",
                            LevelNumber = 3,
                            MaxExperience = 399,
                            MinExperience = 200,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3881),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("0fedcba9-8765-4321-0fed-cba987654321"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3883),
                            CreatedBy = "Administrator",
                            LevelNumber = 4,
                            MaxExperience = 699,
                            MinExperience = 400,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3883),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("abcdef01-2345-6789-abcd-ef0123456789"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3885),
                            CreatedBy = "Administrator",
                            LevelNumber = 5,
                            MaxExperience = 999,
                            MinExperience = 700,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3885),
                            ModifiedBy = "Administrator"
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("09876543-21fe-dcba-9876-54321fedcba0"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3887),
                            CreatedBy = "Administrator",
                            LevelNumber = 6,
                            MinExperience = 1000,
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 236, DateTimeKind.Utc).AddTicks(3887),
                            ModifiedBy = "Administrator"
                        });
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.Link", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.RelationLinkCategory", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.HasKey("LinkId", "LinkCategoryId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("RLinkCategory");
                });

            modelBuilder.Entity("MB.Domain.LinkCategoryAggregate.LinkCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("LinkCategories");
                });

            modelBuilder.Entity("MB.Domain.MediumAggregate.Media", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.Model", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationBookModel", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RBookModel");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationFranchiseModel", b =>
                {
                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("FranchiseId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RFranchiseModel");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Mood", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodArtist", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("RMoodArtist");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodFranchise", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "FranchiseId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("RMoodFranchise");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodModel", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("RMoodModel");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodTag", b =>
                {
                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MoodId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RMoodTag");
                });

            modelBuilder.Entity("MB.Domain.SeasonAggregate.Season", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EntityId");

                    b.ToTable("Seasons", (string)null);
                });

            modelBuilder.Entity("MB.Domain.StyleAggregate.Style", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_Tag_BusinessId");

                    b.HasIndex("TagCategoryId")
                        .HasDatabaseName("IX_Tag_TagCategoryId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("3f1b2d5a-7e89-4c11-a2f3-1d4b6c7e8f90"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(762),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(763),
                            ModifiedBy = "Administrator",
                            Name = "# All Files",
                            TagCategoryId = 1
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("b4c3d2e1-5f6a-4b7c-8d9e-0a1b2c3d4e5f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(769),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(769),
                            ModifiedBy = "Administrator",
                            Name = "# New Files",
                            TagCategoryId = 1
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("7e6d5c4b-3a2f-1e0d-9c8b-7a6f5e4d3c2b"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(771),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(772),
                            ModifiedBy = "Administrator",
                            Name = "Audio",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("1a2b3c4d-5e6f-7081-92a3-b4c5d6e7f8a9"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(781),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(781),
                            ModifiedBy = "Administrator",
                            Name = "Image",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("0f9e8d7c-6b5a-4c3d-2e1f-0a9b8c7d6e5f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(784),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(784),
                            ModifiedBy = "Administrator",
                            Name = "Video",
                            TagCategoryId = 2
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(787),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(787),
                            ModifiedBy = "Administrator",
                            Name = "*.mp3",
                            TagCategoryId = 3
                        },
                        new
                        {
                            EntityId = 7,
                            BusinessId = new Guid("9abcdef0-1234-5678-9abc-def012345678"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(789),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(789),
                            ModifiedBy = "Administrator",
                            Name = "*.bmp",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 8,
                            BusinessId = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(791),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(791),
                            ModifiedBy = "Administrator",
                            Name = "*.gif",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 9,
                            BusinessId = new Guid("0a1b2c3d-4e5f-6071-8273-94a5b6c7d8e9"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(793),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(793),
                            ModifiedBy = "Administrator",
                            Name = "*.jpeg",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 10,
                            BusinessId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(795),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(795),
                            ModifiedBy = "Administrator",
                            Name = "*.jpg",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 11,
                            BusinessId = new Guid("00ffeedd-ccbb-aaff-8877-665544332211"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(797),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(798),
                            ModifiedBy = "Administrator",
                            Name = "*.png",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 12,
                            BusinessId = new Guid("abcdef01-2345-6789-abcd-ef0123456789"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(802),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(803),
                            ModifiedBy = "Administrator",
                            Name = "*.webp",
                            TagCategoryId = 4
                        },
                        new
                        {
                            EntityId = 13,
                            BusinessId = new Guid("56789abc-def0-1234-5678-9abcdef01234"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(805),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(805),
                            ModifiedBy = "Administrator",
                            Name = "*.mp4",
                            TagCategoryId = 5
                        },
                        new
                        {
                            EntityId = 14,
                            BusinessId = new Guid("43210fed-cba9-8765-4321-0fedcba98765"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(807),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(807),
                            ModifiedBy = "Administrator",
                            Name = "*.webm",
                            TagCategoryId = 5
                        },
                        new
                        {
                            EntityId = 15,
                            BusinessId = new Guid("a1b2c3d4-e5f6-7890-ab12-cd34ef56ab78"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(809),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(809),
                            ModifiedBy = "Administrator",
                            Name = "Landscape",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 16,
                            BusinessId = new Guid("87654321-0fed-cba9-8765-43210fedcba9"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(811),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(812),
                            ModifiedBy = "Administrator",
                            Name = "Landscape (16:9)",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 17,
                            BusinessId = new Guid("deadbeef-0000-1111-2222-333344445555"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(813),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(814),
                            ModifiedBy = "Administrator",
                            Name = "Portrait",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 18,
                            BusinessId = new Guid("faceb00c-1234-5678-9abc-def123456789"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(816),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(816),
                            ModifiedBy = "Administrator",
                            Name = "Portrait (16:9)",
                            TagCategoryId = 6
                        },
                        new
                        {
                            EntityId = 19,
                            BusinessId = new Guid("cafebabe-0001-0002-0003-000400050006"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(831),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 261, DateTimeKind.Utc).AddTicks(831),
                            ModifiedBy = "Administrator",
                            Name = "Square",
                            TagCategoryId = 6
                        });
                });

            modelBuilder.Entity("MB.Domain.TagCategoryAggregate.TagCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("TagCategories");

                    b.HasData(
                        new
                        {
                            EntityId = 1,
                            BusinessId = new Guid("3f1b2d5a-7e89-4c11-a2f3-1d4b6c7e8f90"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4539),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4542),
                            ModifiedBy = "Administrator",
                            Name = "#"
                        },
                        new
                        {
                            EntityId = 2,
                            BusinessId = new Guid("b4c3d2e1-5f6a-4b7c-8d9e-0a1b2c3d4e5f"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4570),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4571),
                            ModifiedBy = "Administrator",
                            Name = "# File"
                        },
                        new
                        {
                            EntityId = 3,
                            BusinessId = new Guid("0dda8c71-8f2a-4c99-94b1-9adf3e2c5a7b"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4573),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4574),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Audio"
                        },
                        new
                        {
                            EntityId = 4,
                            BusinessId = new Guid("a1b2c3d4-e5f6-7890-ab12-cd34ef56ab79"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4576),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4577),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Image"
                        },
                        new
                        {
                            EntityId = 5,
                            BusinessId = new Guid("11223344-5566-7788-99aa-bbccddeeff11"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4579),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4579),
                            ModifiedBy = "Administrator",
                            Name = "# File ext. | Video"
                        },
                        new
                        {
                            EntityId = 6,
                            BusinessId = new Guid("22334455-6677-8899-aabb-ccddeeff2233"),
                            Created = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4582),
                            CreatedBy = "Administrator",
                            Description = "",
                            Modified = new DateTime(2025, 5, 9, 20, 7, 43, 260, DateTimeKind.Utc).AddTicks(4582),
                            ModifiedBy = "Administrator",
                            Name = "# File Format"
                        });
                });

            modelBuilder.Entity("MB.Domain.TaskAggregate.Task", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("05/09/2025 22:07:43");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MB.Domain.TaskCategoryAggregate.TaskCategory", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LeagueDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.HasIndex("LeagueDefinitionId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.AudioSoundCloud", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmbedUrl");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailUrl");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Document", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.ToTable("Moods", t =>
                        {
                            t.Property("Size")
                                .HasColumnName("Document_Size");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Image", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Video", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("Moods", null, t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Video_Height");

                            t.Property("Size")
                                .HasColumnName("Video_Size");

                            t.Property("Width")
                                .HasColumnName("Video_Width");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.VideoYouTube", b =>
                {
                    b.HasBaseType("MB.Domain.MoodAggregate.Mood");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.ToTable("Moods", (string)null);

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("MB.Domain.AchievementAggregate.UserAchievement", b =>
                {
                    b.HasOne("MB.Domain.AchievementAggregate.AchievementDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("AchievementDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MB.Domain.UserAggregate.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationArtistStyle", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("ArtistStyles")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.StyleAggregate.Style", "Style")
                        .WithMany("ArtistStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkArtist", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("LinkArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkArtists")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.RelationLinkModel", b =>
                {
                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkModels")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("LinkModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationBookFranchise", b =>
                {
                    b.HasOne("MB.Domain.BookAggregate.Book", "Book")
                        .WithMany("BookFranchise")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("BookFranchise")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.RelationFranchiseMedia", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("FranchiseMedias")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MediumAggregate.Media", "Media")
                        .WithMany("FranchiseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MB.Domain.LeagueAggregate.LeagueDefinition", b =>
                {
                    b.HasOne("MB.Domain.SeasonAggregate.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.RelationLinkCategory", b =>
                {
                    b.HasOne("MB.Domain.LinkCategoryAggregate.LinkCategory", "LinkCategory")
                        .WithMany("RLinkCategories")
                        .HasForeignKey("LinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.LinkAggregate.Link", "Link")
                        .WithMany("LinkCategories")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("LinkCategory");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationBookModel", b =>
                {
                    b.HasOne("MB.Domain.BookAggregate.Book", "Book")
                        .WithMany("BookModel")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("BookModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.RelationFranchiseModel", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("FranchiseModels")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("FranchiseModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodArtist", b =>
                {
                    b.HasOne("MB.Domain.ArtistAggregate.Artist", "Artist")
                        .WithMany("MoodArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodArtists")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodFranchise", b =>
                {
                    b.HasOne("MB.Domain.FranchiseAggregate.Franchise", "Franchise")
                        .WithMany("MoodFranchises")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodFranchises")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodModel", b =>
                {
                    b.HasOne("MB.Domain.ModelAggregate.Model", "Model")
                        .WithMany("MoodModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodModels")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.RelationMoodTag", b =>
                {
                    b.HasOne("MB.Domain.MoodAggregate.Mood", "Mood")
                        .WithMany("MoodTags")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MB.Domain.TagAggregate.Tag", "Tag")
                        .WithMany("MoodTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.HasOne("MB.Domain.TagCategoryAggregate.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("MB.Domain.TaskAggregate.Task", b =>
                {
                    b.HasOne("MB.Domain.TaskCategoryAggregate.TaskCategory", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCategory");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.EmailVerificationToken", b =>
                {
                    b.HasOne("MB.Domain.UserAggregate.User", "User")
                        .WithMany("EmailVerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.HasOne("MB.Domain.LeagueAggregate.LeagueDefinition", "LeagueDefinition")
                        .WithMany()
                        .HasForeignKey("LeagueDefinitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MB.Domain.SeasonAggregate.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LeagueDefinition");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MB.Domain.ArtistAggregate.Artist", b =>
                {
                    b.Navigation("ArtistStyles");

                    b.Navigation("LinkArtists");

                    b.Navigation("MoodArtists");
                });

            modelBuilder.Entity("MB.Domain.BookAggregate.Book", b =>
                {
                    b.Navigation("BookFranchise");

                    b.Navigation("BookModel");
                });

            modelBuilder.Entity("MB.Domain.FranchiseAggregate.Franchise", b =>
                {
                    b.Navigation("BookFranchise");

                    b.Navigation("FranchiseMedias");

                    b.Navigation("FranchiseModels");

                    b.Navigation("MoodFranchises");
                });

            modelBuilder.Entity("MB.Domain.LinkAggregate.Link", b =>
                {
                    b.Navigation("LinkArtists");

                    b.Navigation("LinkCategories");

                    b.Navigation("LinkModels");
                });

            modelBuilder.Entity("MB.Domain.LinkCategoryAggregate.LinkCategory", b =>
                {
                    b.Navigation("RLinkCategories");
                });

            modelBuilder.Entity("MB.Domain.MediumAggregate.Media", b =>
                {
                    b.Navigation("FranchiseMedias");
                });

            modelBuilder.Entity("MB.Domain.ModelAggregate.Model", b =>
                {
                    b.Navigation("BookModel");

                    b.Navigation("FranchiseModels");

                    b.Navigation("LinkModels");

                    b.Navigation("MoodModels");
                });

            modelBuilder.Entity("MB.Domain.MoodAggregate.Mood", b =>
                {
                    b.Navigation("MoodArtists");

                    b.Navigation("MoodFranchises");

                    b.Navigation("MoodModels");

                    b.Navigation("MoodTags");
                });

            modelBuilder.Entity("MB.Domain.StyleAggregate.Style", b =>
                {
                    b.Navigation("ArtistStyles");
                });

            modelBuilder.Entity("MB.Domain.TagAggregate.Tag", b =>
                {
                    b.Navigation("MoodTags");
                });

            modelBuilder.Entity("MB.Domain.TagCategoryAggregate.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MB.Domain.TaskCategoryAggregate.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MB.Domain.UserAggregate.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("EmailVerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
